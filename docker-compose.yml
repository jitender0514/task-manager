version: '3.9'

services:
  backend:
    container_name: "${APP_NAME}-backend"
    build:
      context: .
      dockerfile: deployment/backend/Dockerfile
      args:
        - APP_MODE=${APP_MODE}
        - APP_NAME=${APP_NAME}
        - APP_HOST=${APP_HOST}
        - APP_PORT=${APP_PORT}
    volumes:
      - ./backend:/usr/src/app/
      - ./deployment/scripts:/app/deployment/scripts/
    environment:
      - APP_MODE=test
    env_file: .env
    ports:
      - "${APP_PORT}:${APP_PORT}"
    depends_on:
      db:
        condition: service_healthy
    command: [ "/bin/sh", "/app/deployment/scripts/django/start.sh" ]
  
  frontend:
    container_name: "${APP_NAME}-frontend"
    build: 
      context: .
      dockerfile: deployment/frontend/Dockerfile
      args:
        - APP_MODE=${NODE_MODE}
        - APP_NAME=${NODE_APP_NAME}
        - APP_PORT=${NODE_PORT}
    volumes:
      - ./frontend:/usr/src/app/
      - ./deployment/scripts:/app/deployment/scripts/
      # One-way volume to use node_modules from inside image
      - /app/node_modules
    env_file: .env
    ports:
      - "${NODE_PORT}:${NODE_PORT}"
    environment:
      - NODE_MODE=development
    depends_on:
      - backend
    command: [ "/bin/sh", "/app/deployment/scripts/react/start.sh" ]

  db:
    image: postgres:15.2-alpine
    container_name: "${APP_NAME}-db"
    hostname: "${POSTGRES_HOST:-db}"
    volumes:
      - postgres_data_dir:/var/lib/postgresql/data/
    env_file: .env
    expose:
      - "${POSTGRES_PORT:-5432}"
    shm_size: 1g
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres_data_dir: